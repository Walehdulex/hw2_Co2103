Homework 2: Tasks for aa1327
Your personal task is to develop a system for a building, apartments and their tenants.

Task 1: Configuration [12 marks]
Add all the necessary dependencies for connecting to a MySQL database and showing JSPs. [7 marks]
Configure the application to use a MySQL database (username, password, etc.) and to print SQL statements on the console. [5 marks]
Task 2: Domain Classes [15 marks]
Create class co2103.hw2.model.Building. With the following private fields:

int id
String country
List <Apartment> apartments
Apartment penthouse
Generate necessary getters and setters. [3 marks]
Create class co2103.hw2.model.Apartment. With the following private fields:

String name
List <Building> buildings
List <Tenant> tenants
Tenant owner
Generate necessary getters and setters. [3 marks]
Create class co2103.hw2.model.Tenant. With the following private fields:

int identifier
int age
Generate necessary getters and setters. [3 marks]
Generate toString() methods for: [6 marks]

Tenant which prints out the identifier and age of this class.
Apartment which prints out the name, tenants, and owner of this class.
Building which prints out the id, country, apartments, and penthouse of this class.
To format your toString(), integers should be displayed as id=X and Strings as name='X'. You can check your formatting using Task2Test.java. IntelliJ IDEA's in-built toString() generator should follow this format too.

NOTE: You must have created /listBuilding, /listApartment, and /listTenant from Task 5 as well as have at least one of each object stored in your database for the toString() tests to work.

Task 3: JPA Annotations [25 marks]
Annotate the classes in co2103.hw2.model based on these statements:

Add the appropriate annotations so Building, Apartment, and Tenant become tables in your database. [3 marks]
Their primary keys should be id, name, and identifier respectively. [3 marks]
The primary keys of Building and Tenant should be generated automatically. [2 marks]
A building can have many apartments and a apartment can belong to many buildings. The relationship between them is bidirectional. Use mappedBy to indicate this. [2 marks]
A apartment can have multiple tenants but one tenant can only belong to one apartment. Use a join column as well as another annotation to indicate this. [2 marks]
A apartment can have only one owner which belongs to one apartment. [2 marks]
Many apartments may have one penthouse. This penthouse can belong to multiple apartments. [2 marks]
If you save a building, the apartments in the list of apartments should be saved too. [2 marks]
If a apartment is deleted, all its tenants should be deleted too. [2 marks].
If a apartment is loaded, all its tenants should be loaded too. [2 marks]
Please do not manually override the column names by using, for example, (name="NewName") on a @JoinColumn annotation.

Create CRUD repositories for each of your model classes inside the package co2103.hw2.repo called BuildingRepository, ApartmentRepository, and TenantRepository. [3 marks]

Task 4: CRUD Repository Methods [20 marks]
Add a method in BuildingRepository which finds the buildings by country. [5 marks]
Add a method in BuildingRepository which finds the buildings by the name of their penthouse. [5 marks]
Add a method in ApartmentRepository which finds the apartments by name. [5 marks]
Add a method in TenantRepository which finds the tenants by age. [5 marks]
All CRUD repository methods must start with findBy (and not findAllBy, findOneBy, findBuildingsBy etc.)

Task 5: Displaying Data (Model, View, and Controller) [28 marks]
In co2103.hw2.HW2Application, create and store at one instance of every class from co2103.hw2.model. [9 marks]
You will need to use the repositories you have created.
You must use implement CommandLineRunner and override its run method in order to create these instances.
The database should contain one row on each of the tables with no null or empty records.
Create the controller co2103.hw2.controller.ListController which has three methods: /listBuilding, /listApartment, and /listTenant [5 marks]
They all return the JSP /src/main/webapp/WEB-INF/views/list.jsp
Each method should list all objects (their toString() representations) from the database on the JSP. For example, /listBuilding lists all the buildings in the database, /listApartment lists all the apartments, and /listTenant lists all the tenants. [4 marks]
The model attribute in each method which contains the list of buildings/apartments/tenants should be called data.
Use a forEach loop on list.jsp to display the data.
Create the controller co2103.hw2.controller.DeleteController [1 mark]
For each class in package co2103.hw2.model, add a controller method to delete an instance from the database and redirect to the URL http://localhost:8080/
For class Building, the request http://localhost:8080/deleteBuilding?id=5 should delete the building with the primary key id from the database. [3 marks]
For class Apartment, the request http://localhost:8080/deleteApartment?name=Example should delete the apartment with the primary key name from the database. [3 marks]
HINT: You must delete all references to this apartment in the building.
For class Tenant, the request http://localhost:8080/deleteTenant?identifier=2 should delete the tenant with the primary key identifier from the database. [3 marks]